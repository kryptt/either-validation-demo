{"version":3,"sources":["lift.ts","validation.ts","RegistrationForm.tsx","App.tsx","index.tsx"],"names":["lift","check","a","pipe","mapLeft","e","emailValid","email","emailAddress","parseOneAddress","right","left","tInvalidEmail","phoneValid","phone","test","tInvalidPhone","consentValid","c","tConsentRequired","equalPasswords","p1","p2","tPasswordsDiffer","minLength","s","length","tPasswordLength","oneCapital","tPasswordOneCapital","oneNumber","tPasswordOneNumber","applicativeValidation","getValidation","getSemigroup","passwordValid","sequenceT","b","map","constant","RegistrationForm","useState","setEmail","setPhone","password1","setPassword1","password2","setPassword2","consented","setConsented","validationResult","consent","sequenceS","password","validateRegistrationData","Form","error","E","Field","Input","label","name","autoComplete","placeholder","value","onChange","_","type","Checkbox","checked","Message","header","list","Button","primary","content","disabled","onClick","reg","window","alert","JSON","stringify","App","className","href","ReactDOM","render","StrictMode","Container","document","getElementById"],"mappings":"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","file":"static/js/main.a2c85666.chunk.js","sourcesContent":["import { pipe } from 'fp-ts/lib/pipeable'\nimport { Either, mapLeft } from 'fp-ts/lib/Either'\nimport { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray'\n\n/**\n * Lifts the error of a validation function into a (non-empty) array.\n * This way multiple validation functions can be composed while appending\n * their errors to the array. This variant is for a validation function\n * with one parameter.\n *\n * lift :: ( a -> Either e,b ) -> ( a -> Either [e], b )\n *\n * @param check single-arg (validation) function of which the error is lifted\n * @see lift2\n */\nexport function lift<E, A, B> (\n  check: (a: A) => Either<E, B>\n): (a: A) => Either<NonEmptyArray<E>, B> {\n  return a =>\n    pipe(\n      check(a),\n      mapLeft(e => [e])\n    )\n}\n\n/**\n * Lifts the error of a validation function into a (non-empty) array.\n * This way multiple validation functions can be composed while appending\n * their errors to the array. This variant is for a validation function\n * with two parameters.\n *\n * lift :: ( a -> b -> Either e,c ) -> ( a -> b -> Either [e], c )\n *\n * @param check double-arg (validation) function of which the error is lifted\n * @see lift\n */\nexport function lift2<E, A, B, C> (\n  check: (a: A, b: B) => Either<E, C>\n): (a: A, b: B) => Either<NonEmptyArray<E>, C> {\n  return (a, b) =>\n    pipe(\n      check(a, b),\n      mapLeft(e => [e])\n    )\n}\n","import { Either, left, right, map, getValidation } from 'fp-ts/lib/Either'\nimport { lift, lift2 } from './lift'\nimport { sequenceT, sequenceS } from 'fp-ts/lib/Apply'\nimport { pipe } from 'fp-ts/lib/pipeable'\nimport { NonEmptyArray, getSemigroup } from 'fp-ts/lib/NonEmptyArray'\nimport emailAddress from 'email-addresses'\nimport { RegistrationData } from './registerSlice'\nimport { constant } from 'fp-ts/lib/function'\n\nexport const emailValid = (email: string): Either<string, string> =>\n  // tslint:disable-next-line: strict-type-predicates\n  emailAddress.parseOneAddress(email) !== null\n    ? right(email)\n    : left(tInvalidEmail)\n\nexport const phoneValid = (phone: string): Either<string, string> =>\n  /[0-9]{8}/.test(phone) ? right(phone) : left(tInvalidPhone)\n\nexport const consentValid = (c: boolean): Either<string, boolean> =>\n  c ? right(true) : left(tConsentRequired)\n\nexport const equalPasswords = (\n  p1: string,\n  p2: string\n): Either<string, string> => (p1 === p2 ? right(p1) : left(tPasswordsDiffer))\n\nexport const minLength = (s: string): Either<string, string> =>\n  s.length >= 8 ? right(s) : left(tPasswordLength)\n\nexport const oneCapital = (s: string): Either<string, string> =>\n  /[A-Z]/g.test(s) ? right(s) : left(tPasswordOneCapital)\n\n  export const oneNumber = (s: string): Either<string, string> =>\n  /[0-9]/g.test(s) ? right(s) : left(tPasswordOneNumber)\n\nconst applicativeValidation = () => getValidation(getSemigroup<string>())\n\nexport function passwordValid (\n  p1: string,\n  p2: string\n): Either<NonEmptyArray<string>, string> {\n  return pipe(\n    sequenceT(applicativeValidation())(\n      lift(minLength)(p1),\n      lift(oneCapital)(p1),\n      lift(oneNumber)(p1),\n      lift2(equalPasswords)(p1, p2)\n    ),\n    map(constant(p1))\n  )\n}\n\nexport function validateRegistrationData (\n  email: string,\n  phone: string,\n  p1: string,\n  p2: string,\n  consent: boolean\n): Either<NonEmptyArray<string>, RegistrationData> {\n  return sequenceS(applicativeValidation())({\n    email: lift(emailValid)(email),\n    phone: lift(phoneValid)(phone),\n    password: passwordValid(p1, p2),\n    consented: lift(consentValid)(consent)\n  })\n}\n\nexport const tInvalidEmail = 'Email address is invalid'\nexport const tInvalidPhone = 'Phone number should have 8 digits'\nexport const tPasswordsDiffer = 'Passwords are different'\nexport const tPasswordLength = 'Password should have at least 8 characters'\nexport const tPasswordOneCapital = 'Password should have at least one capital'\nexport const tPasswordOneNumber = 'Password should have at least one number'\nexport const tConsentRequired = 'You must accept the terms and conditions'\n","import React, { useState } from 'react'\nimport { Form, Input, Button, Message } from 'semantic-ui-react'\nimport { validateRegistrationData } from './validation'\nimport * as E from 'fp-ts/lib/Either'\nimport { RegistrationData } from './registerSlice'\nimport { constant } from 'fp-ts/lib/function'\n\nexport const RegistrationForm = () => {\n  const [email, setEmail] = useState('')\n  const [phone, setPhone] = useState('')\n  const [password1, setPassword1] = useState('')\n  const [password2, setPassword2] = useState('')\n  const [consented, setConsented] = useState(false)\n\n  const validationResult = validateRegistrationData(\n    email,\n    phone,\n    password1,\n    password2,\n    consented\n  )\n\n  return (\n    <div>\n      <h2>Register</h2>\n      <Form error={E.isLeft(validationResult)}>\n        <Form.Field>\n          <label>Email:</label>\n          <Input\n            label='@'\n            name='email'\n            autoComplete='username'\n            placeholder='Email address'\n            value={email}\n            onChange={(_, { value }) => setEmail(value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Phone:</label>\n          <Input\n            label='+31 (0)6'\n            name='mobile'\n            autoComplete='tel'\n            placeholder='Mobile phone number (extension only)'\n            value={phone}\n            onChange={(_, { value }) => setPhone(value)}\n          />\n        </Form.Field>\n        <Form.Input\n          label='Password'\n          type='password'\n          autoComplete='new-password'\n          placeholder='new password'\n          value={password1}\n          onChange={(_, { value }) => setPassword1(value)}\n        />\n        <Form.Input\n          label='Password again'\n          type='password'\n          autoComplete='new-password'\n          placeholder='same as above'\n          value={password2}\n          onChange={(_, { value }) => setPassword2(value)}\n        />\n        <Form.Checkbox\n          label='I accept the terms and conditions'\n          checked={consented}\n          onChange={(_, { checked }) => setConsented(checked || false)}\n        />\n        <Message\n          error\n          header='The form is not filled out correctly'\n          list={E.getOrElse(constant([] as string[]))(E.swap(validationResult))}\n        />\n        <Button\n          primary\n          content='Register'\n          disabled={E.isLeft(validationResult)}\n          onClick={() => {\n            E.map((reg: RegistrationData) =>\n              window.alert(\n                'All ok, dispatch the data now: ' + JSON.stringify(reg)\n              )\n            )(validationResult)\n          }}\n        />\n      </Form>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RegistrationForm } from './RegistrationForm'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <h1>Demo of form validation using Either</h1>\n      <p>\n        This demo belongs to my blog post{' '}\n        <a href='https://040code.github.io/2020/05/25/getting-help-from-your-compiler'>\n          Getting Help From Your Compiler\n        </a>\n        .\n      </p>\n      <RegistrationForm />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container>\n      <App />\n    </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}