{"version":3,"sources":["lift.ts","validation.ts","registrationValidation.ts","RegistrationForm.tsx","App.tsx","index.tsx"],"names":["lift","check","a","pipe","mapLeft","e","n","atLeastOneCapital","O","s","test","atLeastOneNumber","parseEmail","email","emailAddress","parseOneAddress","emailValidator","flow","constant","fromOption","phoneValidator","RegExp","consentValid","c","right","left","equalPasswordsValidator","p1","p2","minPasswordLengthValidator","minLength","length","minLengthPred","oneCapitalValidator","oneNumberValidator","applicativeValidation","getValidation","getSemigroup","passwordValid","sequenceT","b","map","RegistrationForm","useState","setEmail","phone","setPhone","password1","setPassword1","password2","setPassword2","consented","setConsented","validationResult","consent","sequenceS","password","validateRegistrationData","Form","error","E","Field","Input","label","name","autoComplete","placeholder","value","onChange","_","type","Checkbox","checked","Message","header","list","Button","primary","content","disabled","onClick","reg","window","alert","JSON","stringify","App","className","href","ReactDOM","render","StrictMode","Container","document","getElementById"],"mappings":"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","file":"static/js/main.296c8a22.chunk.js","sourcesContent":["import { pipe } from 'fp-ts/lib/pipeable'\nimport { Either, mapLeft } from 'fp-ts/lib/Either'\nimport { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray'\n\n/**\n * Lifts the error of a validation function into a (non-empty) array.\n * This way multiple validation functions can be composed while appending\n * their errors to the array. This variant is for a validation function\n * with one parameter.\n *\n * lift :: ( a -> Either e,b ) -> ( a -> Either [e], b )\n *\n * @param check single-arg (validation) function of which the error is lifted\n * @see lift2\n */\nexport function lift<E, A, B> (\n  check: (a: A) => Either<E, B>\n): (a: A) => Either<NonEmptyArray<E>, B> {\n  return a =>\n    pipe(\n      check(a),\n      mapLeft(e => [e])\n    )\n}\n\n/**\n * Lifts the error of a validation function into a (non-empty) array.\n * This way multiple validation functions can be composed while appending\n * their errors to the array. This variant is for a validation function\n * with two parameters.\n *\n * lift :: ( a -> b -> Either e,c ) -> ( a -> b -> Either [e], c )\n *\n * @param check double-arg (validation) function of which the error is lifted\n * @see lift\n */\nexport function lift2<E, A, B, C> (\n  check: (a: A, b: B) => Either<E, C>\n): (a: A, b: B) => Either<NonEmptyArray<E>, C> {\n  return (a, b) =>\n    pipe(\n      check(a, b),\n      mapLeft(e => [e])\n    )\n}\n","import * as O from 'fp-ts/lib/Option'\nimport emailAddress from 'email-addresses'\n\nexport const atLeastOneCapital = O.fromPredicate((s: string) =>\n  /[A-Z]/g.test(s)\n)\nexport const atLeastOneNumber = O.fromPredicate((s: string) => /[0-9]/g.test(s))\n\nexport const digits = (n: number) =>\n  O.fromPredicate((s: string) => new RegExp(`^[0-9]{${n}}$`).test(s))\n\nconst minLengthPred = (minLength: number) => (s: string) =>\n  s.length >= minLength\n\nconst maxLengthPred = (maxLength: number) => (s: string) =>\n  s.length <= maxLength\n\nexport const minLength = (n: number) => O.fromPredicate(minLengthPred(n))\nexport const maxLength = (n: number) => O.fromPredicate(maxLengthPred(n))\n\ntype Email = ReturnType<typeof emailAddress.parseOneAddress>\n\nexport const parseEmail = (email: string): O.Option<Email> =>\n  O.fromNullable(emailAddress.parseOneAddress(email))\n","import {\n  Either,\n  left,\n  right,\n  map,\n  getValidation,\n  fromOption\n} from 'fp-ts/lib/Either'\nimport * as O from 'fp-ts/lib/Option'\nimport { lift, lift2 } from './lift'\nimport { sequenceT, sequenceS } from 'fp-ts/lib/Apply'\nimport { pipe } from 'fp-ts/lib/pipeable'\nimport { NonEmptyArray, getSemigroup } from 'fp-ts/lib/NonEmptyArray'\nimport { RegistrationData } from './registerSlice'\nimport { constant, flow } from 'fp-ts/lib/function'\nimport {\n  parseEmail,\n  minLength,\n  atLeastOneCapital,\n  atLeastOneNumber,\n  digits\n} from './validation'\n\nexport const tInvalidEmail = 'Email address is invalid'\nexport const tInvalidPhone = 'Phone number should have 8 digits'\nexport const tPasswordsDiffer = 'Passwords are different'\nexport const tPasswordLength = 'Password should have at least 8 characters'\nexport const tPasswordOneCapital = 'Password should have at least one capital'\nexport const tPasswordOneNumber = 'Password should have at least one number'\nexport const tConsentRequired = 'You must accept the terms and conditions'\n\nexport const emailValidator = (email: string) =>\n  flow(\n    parseEmail,\n    O.map(constant(email)),\n    fromOption(constant(tInvalidEmail))\n  )(email)\n\nexport const phoneValidator = flow(\n  digits(8),\n  fromOption(constant(tInvalidPhone))\n)\n\nexport const consentValid = (c: boolean): Either<string, boolean> =>\n  c ? right(true) : left(tConsentRequired)\n\nexport const equalPasswordsValidator = (\n  p1: string,\n  p2: string\n): Either<string, string> => (p1 === p2 ? right(p1) : left(tPasswordsDiffer))\n\nexport const minPasswordLengthValidator = flow(\n  minLength(8),\n  fromOption(constant(tPasswordLength))\n)\n\nexport const oneCapitalValidator = flow(\n  atLeastOneCapital,\n  fromOption(constant(tPasswordOneCapital))\n)\n\nexport const oneNumberValidator = flow(\n  atLeastOneNumber,\n  fromOption(constant(tPasswordOneNumber))\n)\n\nconst applicativeValidation = () => getValidation(getSemigroup<string>())\n\nexport function passwordValid (\n  p1: string,\n  p2: string\n): Either<NonEmptyArray<string>, string> {\n  return pipe(\n    sequenceT(applicativeValidation())(\n      lift(minPasswordLengthValidator)(p1),\n      lift(oneCapitalValidator)(p1),\n      lift(oneNumberValidator)(p1),\n      lift2(equalPasswordsValidator)(p1, p2)\n    ),\n    map(constant(p1))\n  )\n}\n\nexport function validateRegistrationData (\n  email: string,\n  phone: string,\n  p1: string,\n  p2: string,\n  consent: boolean\n): Either<NonEmptyArray<string>, RegistrationData> {\n  return sequenceS(applicativeValidation())({\n    email: lift(emailValidator)(email),\n    phone: lift(phoneValidator)(phone),\n    password: passwordValid(p1, p2),\n    consented: lift(consentValid)(consent)\n  })\n}\n","import React, { useState } from 'react'\nimport { Form, Input, Button, Message } from 'semantic-ui-react'\nimport { validateRegistrationData } from './registrationValidation'\nimport * as E from 'fp-ts/lib/Either'\nimport { RegistrationData } from './registerSlice'\nimport { constant } from 'fp-ts/lib/function'\n\nexport const RegistrationForm = () => {\n  const [email, setEmail] = useState('')\n  const [phone, setPhone] = useState('')\n  const [password1, setPassword1] = useState('')\n  const [password2, setPassword2] = useState('')\n  const [consented, setConsented] = useState(false)\n\n  const validationResult = validateRegistrationData(\n    email,\n    phone,\n    password1,\n    password2,\n    consented\n  )\n\n  return (\n    <div>\n      <h2>Register</h2>\n      <Form error={E.isLeft(validationResult)}>\n        <Form.Field>\n          <label>Email:</label>\n          <Input\n            label='@'\n            name='email'\n            autoComplete='username'\n            placeholder='Email address'\n            value={email}\n            onChange={(_, { value }) => setEmail(value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Phone:</label>\n          <Input\n            label='+31 (0)6'\n            name='mobile'\n            autoComplete='tel'\n            placeholder='Mobile phone number (extension only)'\n            value={phone}\n            onChange={(_, { value }) => setPhone(value)}\n          />\n        </Form.Field>\n        <Form.Input\n          label='Password'\n          type='password'\n          autoComplete='new-password'\n          placeholder='new password'\n          value={password1}\n          onChange={(_, { value }) => setPassword1(value)}\n        />\n        <Form.Input\n          label='Password again'\n          type='password'\n          autoComplete='new-password'\n          placeholder='same as above'\n          value={password2}\n          onChange={(_, { value }) => setPassword2(value)}\n        />\n        <Form.Checkbox\n          label='I accept the terms and conditions'\n          checked={consented}\n          onChange={(_, { checked }) => setConsented(checked || false)}\n        />\n        <Message\n          error\n          header='The form is not filled out correctly'\n          list={E.getOrElse(constant([] as string[]))(E.swap(validationResult))}\n        />\n        <Button\n          primary\n          content='Register'\n          disabled={E.isLeft(validationResult)}\n          onClick={() => {\n            E.map((reg: RegistrationData) =>\n              window.alert(\n                'All ok, dispatch the data now: ' + JSON.stringify(reg)\n              )\n            )(validationResult)\n          }}\n        />\n      </Form>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RegistrationForm } from './RegistrationForm'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <h1>Demo of form validation using Either</h1>\n      <p>\n        This demo belongs to my blog post{' '}\n        <a href='https://040code.github.io/2020/05/25/getting-help-from-your-compiler'>\n          Getting Help From Your Compiler\n        </a>\n        .\n      </p>\n      <RegistrationForm />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container>\n      <App />\n    </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}